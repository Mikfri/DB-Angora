// <auto-generated />
using System;
using DB_AngoraLib.EF_DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_AngoraREST.Migrations
{
    [DbContext(typeof(DB_AngoraContext))]
    partial class DB_AngoraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB_AngoraLib.Models.ApplicationBreeder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("DocumentationPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedBreederRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserApplicantId");

                    b.ToTable("BreederApplications");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.BreederBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreederBrandDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreederBrandLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreederBrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFindable")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BreederBrands");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RabbitEarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RabbitEarCombId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Property<string>("EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FatherId_Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Father_EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ForBreeding")
                        .HasColumnType("int");

                    b.Property<int>("ForSale")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherId_Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mother_EarCombId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.Property<string>("RightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EarCombId");

                    b.HasIndex("Father_EarCombId");

                    b.HasIndex("Mother_EarCombId");

                    b.HasIndex("OriginId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Rabbits");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BodyPoint")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateRated")
                        .HasColumnType("date");

                    b.Property<string>("EarCombId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FurNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FurPoint")
                        .HasColumnType("int");

                    b.Property<string>("RabbitRatedEarCombId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TotalPoint")
                        .HasColumnType("int");

                    b.Property<string>("WeightNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeightPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RabbitRatedEarCombId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.TransferRequst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DateAccepted")
                        .HasColumnType("date");

                    b.Property<string>("IssuerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("RabbitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SaleConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("RabbitId");

                    b.HasIndex("RecipentId");

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Trimming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateTrimmed")
                        .HasColumnType("date");

                    b.Property<int>("DisposableWoolWeightGram")
                        .HasColumnType("int");

                    b.Property<int>("FirstSortmentWeightGram")
                        .HasColumnType("int");

                    b.Property<float?>("HairLengthCm")
                        .HasColumnType("real");

                    b.Property<string>("RabbitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SecondSortmentWeightGram")
                        .HasColumnType("int");

                    b.Property<int?>("TimeUsedMinutes")
                        .HasColumnType("int");

                    b.Property<float?>("WoolDensity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("RabbitId");

                    b.ToTable("Trimmings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoadNameAndNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "MikkelsId",
                            AccessFailedCount = 0,
                            City = "Kirke Såby",
                            ConcurrencyStamp = "1d7ebc48-abed-4428-aae2-692dce748d2a",
                            Email = "Mikk.fri@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mikkel",
                            LastName = "Friborg",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKK.FRI@GMAIL.COM",
                            NormalizedUserName = "MIKK.FRI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED7FiXLCuq3wpoZ36NfuLZeSvozHjG14GAdUYQsJpgWyPbdSUIG7FRD2/Q8ZETeV1g==",
                            PhoneNumber = "81183394",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Fynsvej 14",
                            SecurityStamp = "dac6ffb1-4ce6-4687-b0d9-c4e9bcdfc70b",
                            TwoFactorEnabled = false,
                            UserName = "Mikk.fri@gmail.com",
                            ZipCode = 4060
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Breeder",
                            NormalizedName = "BREEDER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "User:Read",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "User:Create",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "User:Update",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "User:Delete",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Any",
                            RoleId = "3"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Any",
                            RoleId = "1"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Rabbit:Create",
                            ClaimValue = "Own",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Rabbit:Read",
                            ClaimValue = "Own",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Rabbit:Update",
                            ClaimValue = "Own",
                            RoleId = "2"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Rabbit:Delete",
                            ClaimValue = "Own",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "IdasId",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "MajasId",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "MikkelsId",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Breeder", b =>
                {
                    b.HasBaseType("DB_AngoraLib.Models.User");

                    b.Property<string>("BreederRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("BreederRegNo")
                        .IsUnique()
                        .HasFilter("[BreederRegNo] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Breeder");

                    b.HasData(
                        new
                        {
                            Id = "IdasId",
                            AccessFailedCount = 0,
                            City = "Kirke Såby",
                            ConcurrencyStamp = "32aa9e7e-d2ed-4277-8887-d6edcd2b5340",
                            Email = "IdaFriborg87@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ida",
                            LastName = "Friborg",
                            LockoutEnabled = false,
                            NormalizedEmail = "IDAFRIBORG87@GMAIL.COM",
                            NormalizedUserName = "IDAFRIBORG87@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENupYdrWXiTDVCFqANQRSyWa+Z5K16pu5U70Iru3XuYxCJREbib8u3ivoILlnW2oPA==",
                            PhoneNumber = "27586455",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Fynsvej 14",
                            SecurityStamp = "71a331d3-aa06-4e84-b9be-b81b8ffaf72e",
                            TwoFactorEnabled = false,
                            UserName = "IdaFriborg87@gmail.com",
                            ZipCode = 4060,
                            BreederRegNo = "5095"
                        },
                        new
                        {
                            Id = "MajasId",
                            AccessFailedCount = 0,
                            City = "Benløse",
                            ConcurrencyStamp = "5462c838-5149-4044-a593-b39f73694589",
                            Email = "MajaJoensen89@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maja",
                            LastName = "Hulstrøm",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAJAJOENSEN89@GMAIL.COM",
                            NormalizedUserName = "MAJAJOENSEN89@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGgnb7bcJabvSqUvnmQNIpffH+I6nA4f0AnbPJv7k5GYBlUbBb8Gpaihvsu3oCUdA==",
                            PhoneNumber = "28733085",
                            PhoneNumberConfirmed = false,
                            RoadNameAndNo = "Sletten 4",
                            SecurityStamp = "9c3472dc-7e40-405b-b8dd-ab6feb472316",
                            TwoFactorEnabled = false,
                            UserName = "MajaJoensen89@gmail.com",
                            ZipCode = 4100,
                            BreederRegNo = "5053"
                        });
                });

            modelBuilder.Entity("DB_AngoraLib.Models.ApplicationBreeder", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "UserApplicant")
                        .WithMany("BreederApplications")
                        .HasForeignKey("UserApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserApplicant");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.BreederBrand", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Breeder", "BreederBrandOwner")
                        .WithOne("BreederBrand")
                        .HasForeignKey("DB_AngoraLib.Models.BreederBrand", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BreederBrandOwner");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Favorite", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Photo", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", null)
                        .WithMany("Photos")
                        .HasForeignKey("RabbitEarCombId");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Father")
                        .WithMany("FatheredChildren")
                        .HasForeignKey("Father_EarCombId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Mother")
                        .WithMany("MotheredChildren")
                        .HasForeignKey("Mother_EarCombId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserOrigin")
                        .WithMany("RabbitsLinked")
                        .HasForeignKey("OriginId");

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserOwner")
                        .WithMany("RabbitsOwned")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("UserOrigin");

                    b.Navigation("UserOwner");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rating", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "RabbitRated")
                        .WithMany()
                        .HasForeignKey("RabbitRatedEarCombId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RabbitRated");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.RefreshToken", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.TransferRequst", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserIssuer")
                        .WithMany("RabbitTransfers_Issued")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Rabbit")
                        .WithMany()
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DB_AngoraLib.Models.Breeder", "UserRecipent")
                        .WithMany("RabbitTransfers_Received")
                        .HasForeignKey("RecipentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Rabbit");

                    b.Navigation("UserIssuer");

                    b.Navigation("UserRecipent");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Trimming", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Rabbit")
                        .WithMany("Trimmings")
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Navigation("FatheredChildren");

                    b.Navigation("MotheredChildren");

                    b.Navigation("Photos");

                    b.Navigation("Trimmings");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Navigation("BreederApplications");

                    b.Navigation("Favorites");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Breeder", b =>
                {
                    b.Navigation("BreederBrand")
                        .IsRequired();

                    b.Navigation("RabbitTransfers_Issued");

                    b.Navigation("RabbitTransfers_Received");

                    b.Navigation("RabbitsLinked");

                    b.Navigation("RabbitsOwned");
                });
#pragma warning restore 612, 618
        }
    }
}
