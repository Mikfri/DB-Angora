// <auto-generated />
using System;
using DB_AngoraLib.EF_DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_AngoraLib.Migrations
{
    [DbContext(typeof(DB_AngoraContext))]
    [Migration("20240418163259_DB_Angora_01")]
    partial class DB_Angora_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB_AngoraLib.Models.Litter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FatherLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FatherRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotherLeftEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotherRightEarId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FatherRightEarId", "FatherLeftEarId");

                    b.HasIndex("MotherRightEarId", "MotherLeftEarId");

                    b.ToTable("Litters");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.Property<string>("RightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("ApprovedRaceColorCombination")
                        .HasColumnType("bit");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FatherLeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FatherRightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("IsPublic")
                        .HasColumnType("int");

                    b.Property<string>("MotherLeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MotherRightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Race")
                        .HasColumnType("int");

                    b.HasKey("RightEarId", "LeftEarId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("FatherRightEarId", "FatherLeftEarId");

                    b.HasIndex("MotherRightEarId", "MotherLeftEarId");

                    b.ToTable("Rabbits");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Property<string>("BreederRegNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoadNameAndNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("BreederRegNo");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LitterRabbit", b =>
                {
                    b.Property<int>("LittersId")
                        .HasColumnType("int");

                    b.Property<string>("RabbitsRightEarId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RabbitsLeftEarId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LittersId", "RabbitsRightEarId", "RabbitsLeftEarId");

                    b.HasIndex("RabbitsRightEarId", "RabbitsLeftEarId");

                    b.ToTable("LitterRabbit");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Litter", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Father")
                        .WithMany()
                        .HasForeignKey("FatherRightEarId", "FatherLeftEarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherRightEarId", "MotherLeftEarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Father");

                    b.Navigation("Mother");
                });

            modelBuilder.Entity("DB_AngoraLib.Models.Rabbit", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.User", "Owner")
                        .WithMany("Rabbits")
                        .HasForeignKey("OwnerId");

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Father")
                        .WithMany()
                        .HasForeignKey("FatherRightEarId", "FatherLeftEarId");

                    b.HasOne("DB_AngoraLib.Models.Rabbit", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherRightEarId", "MotherLeftEarId");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LitterRabbit", b =>
                {
                    b.HasOne("DB_AngoraLib.Models.Litter", null)
                        .WithMany()
                        .HasForeignKey("LittersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_AngoraLib.Models.Rabbit", null)
                        .WithMany()
                        .HasForeignKey("RabbitsRightEarId", "RabbitsLeftEarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DB_AngoraLib.Models.User", b =>
                {
                    b.Navigation("Rabbits");
                });
#pragma warning restore 612, 618
        }
    }
}
